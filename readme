# 🎮 Jogo Adivinhe o País

## 1. Visão Geral do Projeto
Este documento detalha as regras e a arquitetura do **Jogo Adivinhe o País**, um projeto *full-stack* desenvolvido para a disciplina de **Back-end II**.  

A aplicação é composta por:  
- **Back-end**: Webserver (API) em **Node.js/Express**.  
- **Front-end**: Interface em **React**.  

O jogo consome dados de **APIs de terceiros** e traz múltiplas mecânicas, modos de jogo e foco em **polimento visual** e **experiência do usuário**.

---

## 2. Modos de Jogo

### 2.1. 🔹 Modo Clássico
- **Objetivo**: Testar conhecimento de forma estratégica, gerenciando vidas.  
- **Vidas**: Jogador começa com **3 vidas**. Cada erro consome 1 vida.  
- **Pontuação**: Cada acerto = **+1 ponto**.  
- **Vitória**: Atingir **5 pontos**.  
- **Derrota**: Perder todas as vidas.  

### 2.2. ⏱️ Modo Time Attack
- **Objetivo**: Testar agilidade e conhecimento sob pressão.  
- **Tempo inicial**: **60 segundos**.  
- **Bônus por acerto**: **+2 segundos**.  
- **Penalidade por erro**: **-10 segundos**.  
- **Fim de jogo**: Tempo chega a zero → pontuação final registrada.  

---

## 3. Tipos de Pergunta
Para manter variedade, o jogo sorteia perguntas entre **5 categorias**:  

- **Por Capital**: Ex.: “A qual país pertence a capital *Varsóvia*?”  
- **Por Continente**: Ex.: “Qual destes países fica na Ásia?”  
- **Por Moeda**: Ex.: “A qual país pertence a moeda *Euro*?” *(com cotação em tempo real)*.  
- **Por Idioma**: Ex.: “Qual destes países tem *Inglês* como idioma oficial?”  
- **Por Bandeira**: Ex.: “A qual país pertence esta bandeira?” *(imagem exibida)*.  

---

## 4. Features da Interface (UI/UX)
A interface foi construída com foco em **fluidez, polimento e feedback visual imediato**.  

- 🌗 **Tema Claro/Escuro**: Preferência salva no navegador.  
- 🎨 **Modais Customizados**: Créditos, configurações e vitória/derrota estilizados com **SweetAlert2**.  
- 🎬 **Animações Ricas (Framer Motion)**:  
  - Transições suaves entre menu e jogo.  
  - Entrada/saída animada para perguntas e opções.  
  - Efeitos de *pop* e *shake* no placar.  
  - Animações na barra de tempo e bônus recebido.  
- ⚡ **Feedback Visual**:  
  - Botões mudam para **verde (correto)** ou **vermelho (incorreto)**.  
  - Botões irrelevantes ficam esmaecidos.  
- 🛠️ **Ícones e Tooltips**: Explicam regras e ações do jogo.  

---

## 5. Arquitetura da API (Back-end)
A API é **stateless** e utiliza **express-session** para gerenciar estado do jogo via cookies.  

- **GET `/jogo/pergunta`** → Inicia jogo (se necessário) e retorna uma pergunta aleatória (sem resposta).  
- **POST `/jogo/responder`** → Recebe resposta, valida com a armazenada na sessão, atualiza placar e retorna resultado.  

---

## 6. Tecnologias Utilizadas

### 🔧 Back-end
- Node.js  
- Express.js  
- express-session  
- axios  
- dotenv  

### 🎨 Front-end
- React.js  
- axios  
- react-icons  
- react-tooltip  
- sweetalert2  
- canvas-confetti  
- Framer Motion  

### 🌍 APIs Externas
- REST Countries  
- ExchangeRate-API  

### 🛠️ Ferramentas
- Git/GitHub  
- npm  
- VS Code  
- concurrently  

---
